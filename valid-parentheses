"""
Thinking Process:

1. Use a stack to store the characters
2. If the character is an opening bracket, push it onto the stack
3. If the character is a closing bracket, pop the top of the stack and check if it matches
4. If it matches, continue, otherwise return False
5. If the stack is empty and all characters have been processed, return True
6. If the stack is not empty, return False

"""

def isValid(self, s: str) -> bool:
        
        def isMatch(l, r):
            if l == "{" and r == "}":
                return True
            elif l == "[" and r == "]":
                return True
            elif l == "(" and r == ")":
                return True
            else:
                return False
        i = 0
        stack = []
        match = True
        while i < len(s) and match:
            if s[i] in "({[":
                stack.append(s[i])
            else:
                if len(stack) == 0:
                    return False
                else:
                    val = stack.pop()
                    if not isMatch(val, s[i]):
                        match = False
                        return False
            i += 1
        if len(stack) == 0 and match:
            return True
        return False

